/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'
//apply from: '../gradle/gradle-mavenlocal.gradle'
apply from: '../gradle/bintray.gradle'

version = VERSION_NAME
group = GROUP

def isReleaseBuild() {
	return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
	return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
			"https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
	return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
			"https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
	return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
	return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

task sourceJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	archiveClassifier = "sources"
}

//afterEvaluate {
//	println("Copy '${project.name}' aar to shared dir.")
//	copy {
//		from "$buildDir/outputs/aar/${project.name}-release.aar"
//		into "../aars/"
//	}
//}

tasks.configureEach {
	if (it.name.startsWith("publish")) {
		it.dependsOn("assembleRelease")
	}
}

publishing {
	publications {
		release(MavenPublication) {
			groupId GROUP
			artifactId POM_ARTIFACT_ID
			version VERSION_NAME
			artifact(sourceJar)
			artifact("$buildDir/outputs/aar/${project.name}-release.aar")

			pom {
				name = POM_NAME
				packaging POM_PACKAGING
				description = POM_DESCRIPTION
				url = POM_URL
				licenses {
					license {
						name = POM_LICENCE_NAME
						url = POM_LICENCE_URL
					}
				}
				developers {
					developer {
						id = POM_DEVELOPER_ID
						name = POM_DEVELOPER_NAME
					}
				}
				scm {
					connection = POM_SCM_CONNECTION
					developerConnection = POM_SCM_DEV_CONNECTION
					url = POM_SCM_URL
				}
			}
		}
	}
}